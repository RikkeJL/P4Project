Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sounddevice as sd\r\nimport scipy.io.wavfile as wave\r\nfrom echo import*\r\nfrom vibrato import*\r\nfrom frequencyChange import*\r\nfrom chorus import*\r\n\r\n\r\nsf, soundInput = wave.read('A_Light_Breeze_from_South_West.wav')\r\n\r\n# ----------- CALCULATIONS FOR FREQUENCY CHANGE ---------#\r\nfreq = resampleFreq(soundInput)\r\n\r\n# ----------- NORMALISATION ------------ #\r\nsoundInput = soundInput[:]/2**15\r\n\r\n# ------------ CALCULATIONS FOR ECHO ------------ #\r\necho = echoEffect(soundInput, 0.5, sf)\r\n\r\n# ------------ CALCULATIONS FOR VIBRATO ------------ #\r\nvibrato = addVibrato(soundInput, sf)\r\n\r\n# ------------ CALCULATIONS FOR CHORUS ------------ #\r\nchorus = chorusEffect(soundInput, sf)\r\n\r\nprint(\"Done Processing\")\r\n# counter = np.int(input(\"Please enter an integer from 0-4: \"))\r\n\r\n# if counter == 1:\r\n# sd.play(echo, sf)\r\n# elif counter == 2:\r\n# sd.play(vibrato, sf)\r\n# elif counter == 3:\r\n# sd.play(chorus, sf)\r\n# else:\r\n# sd.play(soundInput)\r\n\r\n# Makes sure to not stop the melody before everything has played through.\r\n# status = sd.wait()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.py	(revision d7181b19b91004f43ba624156561ada620ac8b17)
+++ main.py	(date 1588165582914)
@@ -9,19 +9,19 @@
 sf, soundInput = wave.read('A_Light_Breeze_from_South_West.wav')
 
 # ----------- CALCULATIONS FOR FREQUENCY CHANGE ---------#
-freq = resampleFreq(soundInput)
+freq = resampleFreq(soundInput, 5)
 
 # ----------- NORMALISATION ------------ #
-soundInput = soundInput[:]/2**15
+# soundInput = soundInput[:]/2**15
 
 # ------------ CALCULATIONS FOR ECHO ------------ #
-echo = echoEffect(soundInput, 0.5, sf)
+# echo = echoEffect(soundInput, 0.5, sf)
 
 # ------------ CALCULATIONS FOR VIBRATO ------------ #
-vibrato = addVibrato(soundInput, sf)
+# vibrato = addVibrato(soundInput, sf)
 
 # ------------ CALCULATIONS FOR CHORUS ------------ #
-chorus = chorusEffect(soundInput, sf)
+# chorus = chorusEffect(soundInput, sf)
 
 print("Done Processing")
 # counter = np.int(input("Please enter an integer from 0-4: "))
@@ -32,8 +32,10 @@
 # sd.play(vibrato, sf)
 # elif counter == 3:
 # sd.play(chorus, sf)
+# elif counter == 4:
+sd.play(freq, sf)
 # else:
-# sd.play(soundInput)
+# sd.play(soundInput, sf)
 
 # Makes sure to not stop the melody before everything has played through.
-# status = sd.wait()
+status = sd.wait()
Index: frequencyChange.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\n\r\n\r\ndef resampleFreq(data):\r\n    # controls how we increase the pitch. If positive it increases pitch, if negative it decreases pitch.\r\n    pitch = -10000\r\n\r\n    # apply a fast fourier transform to the data. The types used is Real Fast Fourier Transform.\r\n    fftData = np.fft.rfft(data)\r\n\r\n    # we create a temporary array to store the data in.\r\n    tempData = [0] * len(fftData)\r\n\r\n    # checks the operation which operation we wish to run and then run it.\r\n    if pitch >= 0:\r\n        # increase frequency\r\n        tempData[pitch:len(fftData)] = fftData[0:(len(fftData) - pitch)]\r\n        tempData[0:pitch] = fftData[(len(fftData) - pitch):len(fftData)]\r\n    else:\r\n        # decrease frequency\r\n        tempData[0:(len(fftData) + pitch)] = fftData[-pitch:len(fftData)]\r\n        tempData[(len(fftData) + pitch):len(fftData)] = fftData[0:-pitch]\r\n\r\n    # Packing the data into a final data array\r\n    pitchedData = np.array(tempData)\r\n\r\n    # inverse transform to get back to temporal data\r\n    pitchedData = np.fft.irfft(pitchedData)\r\n\r\n    # returns the data\r\n    print(\"Frequency Change Done!\")\r\n    return pitchedData\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- frequencyChange.py	(revision d7181b19b91004f43ba624156561ada620ac8b17)
+++ frequencyChange.py	(date 1588165508367)
@@ -1,32 +1,10 @@
 import numpy as np
 
 
-def resampleFreq(data):
-    # controls how we increase the pitch. If positive it increases pitch, if negative it decreases pitch.
-    pitch = -10000
-
-    # apply a fast fourier transform to the data. The types used is Real Fast Fourier Transform.
-    fftData = np.fft.rfft(data)
-
-    # we create a temporary array to store the data in.
-    tempData = [0] * len(fftData)
-
-    # checks the operation which operation we wish to run and then run it.
-    if pitch >= 0:
-        # increase frequency
-        tempData[pitch:len(fftData)] = fftData[0:(len(fftData) - pitch)]
-        tempData[0:pitch] = fftData[(len(fftData) - pitch):len(fftData)]
-    else:
-        # decrease frequency
-        tempData[0:(len(fftData) + pitch)] = fftData[-pitch:len(fftData)]
-        tempData[(len(fftData) + pitch):len(fftData)] = fftData[0:-pitch]
-
-    # Packing the data into a final data array
-    pitchedData = np.array(tempData)
-
-    # inverse transform to get back to temporal data
-    pitchedData = np.fft.irfft(pitchedData)
-
-    # returns the data
+def resampleFreq(data, factor):
+    freqchange = np.round(np.arange(0, len(data), factor))
+    freqchange = freqchange[freqchange < len(data)]
     print("Frequency Change Done!")
-    return pitchedData
+    return data[freqchange.astype(int)]
+
+
Index: echo.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\n\r\n\r\ndef echoEffect(inputSignal, filterCoef, samplingFreq):\r\n    delay = np.int(np.round(0.15 * samplingFreq))\r\n    nData = np.size(inputSignal)\r\n    outputSignal = np.zeros(nData)\r\n    for n in np.arange(nData):\r\n        if n < delay:\r\n            outputSignal[n] = inputSignal[n]\r\n        else:\r\n            outputSignal[n] = inputSignal[n] + filterCoef * outputSignal[n - delay]\r\n    print(\"Echo Done!\")\r\n    return outputSignal\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- echo.py	(revision d7181b19b91004f43ba624156561ada620ac8b17)
+++ echo.py	(date 1588073776025)
@@ -6,6 +6,7 @@
     nData = np.size(inputSignal)
     outputSignal = np.zeros(nData)
     for n in np.arange(nData):
+        print(n)
         if n < delay:
             outputSignal[n] = inputSignal[n]
         else:
